https://velog.io/@wan088/%EC%8B%9C%EA%B0%84-%EB%B3%B5%EC%9E%A1%EB%8F%84-big-O-big-big-

의 내용을 수업 내용과 연관지어 정리하라



------ 

O (Big-O)

우선 Big-O란 시간의 상한을 나타내는데 간단히 설명하자면 최약의 경우를 나타내는것이다.
예를 들어 수업시간에 했던 임의의 숫자찾기를 앞에서 부터 하나씩 다 보면서 찾는다고 했을떄 가장 최악의 수는 카드끝에 있거나 없는 경우인 카드수 n만큼 걸리는 경우이다. 따라서 O(n)이 Big-O를 나타내는 최악의 경우이다.
하지만 학계 Big-O의 경우 O(n)을 O(n^2)등 알고리즘이 걸리는 시간보다 길기만 하면 어떻게든 표현하든 상관이 없다.


Ω (Big-Omega)

Big-Omega란 시간의 등가 또는 하한을 나타내는데, 이를 간단히 설명하면 최선의 경우를 나타내는 것이다.
위처럼 임의의 숫자찾기를 예로 들었을때 최선의 경우는 맨처음에서 원하는 숫자를 찾는 경우인 1이다. 따라서 Ω(1)을 최선의 경우라고 할 수 있다.


θ (Big-Theta)

사실 학계에서 Big-O와 Big-Omega는 Big-O의 경우 그냥 가장 최악의 수를 항상 말하면 되고 Big-Omega의 경우 Ω(1)이라고 따져도 상관이 없다
따라서 실질적으로 중요한 거는 Big-Theta인데 Big-Theta는 Big-O와 Big-Omega가 만족해야 성립된다.
한마디로 Big-O랑 Big-Omega사이의 적절한 시간 복잡도를 선택하여 나타내는 것이 Big-Theta이다.


근데 실제로는 big-O만 사용하는데 이는 학계가 아닌 업계에서는 Big-O를 Big-θ처럼 적절한 시간 복잡도로 사용하기 때문이다.
위 Big-O처럼 임의의 숫자찾기에서 O(n)을 적절한 시간복잡도로 사용하고 O(n^2)라고 하지않기로 암묵적으로 동의하는 것이다.
또한, 최선의 경우를 적절한 시간복잡도로 잡았을때 최선의 경우보다 많은 시간이 걸리는 무수한 경우에서 나오는 오차가 나오기 때문에
O(n)처럼 최악의 경우를 적절한 시간복잡도로 주로 고려한다.



 너무 졸려 너무졸려 너무 졸려 너무 졸려너무졸려너무 졸려너무졸려 너무졸려너무졸려너무졸려너무졸려너무졸려너무졸려너무졸려너무졸려
