최초의 알고리즘 - 최대공약수 알고리즘 
if b==0 return a
return Euclid(b,a%b)

알고리즘 요리법을 적는것과 비슷하다.
말로 서술할 수 있고,  순서도, 수도 코드, 특정언어로 c언어를 표현할수있다고 배웠을거다.
어떤 언어를 사용하든 표현할수만 있으면 된다.
근데 보통 수도 코드를 많이 사용하는데 프로그래밍 언어와 유사한대신 문법을 안지켜도? 되기떄문이다.

알고리즘은 반복가능한거 처음과 중간이 다르면 안되고, 계속 반복가능해야한다.


가장 큰 수를 찾는 수도 코드
max = a[0]
for i = 1 to o9
if(a[i]>max) max = A[i]
return max


순서도(flow chart)
알고리즘을 개발한 사람과 코드를 구현하는 사람과 의사소통을 위한 수단 (순서도,수도코드) -> 회사마다 사람마다 수단이 다름;


알고리즘 분류 방식
문제해결방식따른 분류 : 분할정복,그리디,동적계획,근사,백트래킹,분기한정 -> 챕터마다 알려줄거 다 있는건 아님.
문제 기반 : 정렬,그래프,기하.
특정환경 : 병렬,분산 양산?

알고리즘 효율성
수행시간 또는 사용되는 메모리 크기(시간 복잡도, 공간 복잡도)
공간많이 써도 시간이 빨리끝나는게 보통 좋은 알고리즘이라고 한다.


시간복잡도란 -> 알고리즘이 시행되는 동안에 사용된 기본적인 연산횟수를 입력크기의 함수로 나타낸다. (기본연산 -> 데이터 간 크기비교,데이터 읽기, 갱신, 숫자 계산, 교환같은 단순한 연산)
최악 경우 분석 -> 어떤 입력이 주어지더라도 알고리즘의 수행시간이 얼마 이상은 넘지 않는다라는 상한의 의미  -> 보통 이걸 보고 판단
평균 경우 분석 -> 입력의 확률 분포를 가정하여 분석하는데, 일반적으로 균등 분포를 가정
최선 경우 분석 - 가장 빠른 수행시간을 분석하며, 최적 알고리즘을 찾는데 활용
상각분석? 이게 뭘까??????? 검색해보자

시간 복잡도는 입력 크기에 대한 함수로 표기
-함수는 여러 개의 항을 가지는 다항식
-이를 입력의 크기에 대한 함수로 표현하기 위해 접근적 표기를 사용  => 접근적 표기 1. 입력 크기 N이 무한대로 커질 때의 복잡도를 간단히 표현하기위해 사용하는 표기법(빅오,빅오메가,빅세타)
							학계에서 말하는 세타와 업계 빅오와 같다. 
							예를 들어 N^2있을 때 빅오는 상한을 이야기하기 때문에 N^2보다 크면 된다. 근데 상한과 하한을 모두 만족하는 세타의 경우 N^2이라고 말해야한다.

f(n) = O(g(n)) n이 증가함에 따라 O(g(n))이 점근적 상한이라는 것 g(n)이 n0보다 큰 모든 n에 대해서 항상 f(n)이 더크다는 것을 의미
O표기법을 찾는 간단한 방법 - 다항식에서 최고 차수 항만을 취한뒤 계수를 제거하여 g(n)을 정한다.  ex) f(n) = 2n^2 -8n + 3 => O(n^2){접근적상한이라고할수있다.} => 빅오 표기법에서 나타내는것을 중요할수도있지만, 뭐가 뭐지는 면접관이 안궁금해할거같다.

오메가는 반대로 하한을 찾는것이다.
f(n) = 오메가(g(n)) n이 증가함에 따라 O(g(n))이 점근적 하한이라는 것 g(n)이 n0보다 큰 모든 n에 대해서 항상 f(n)보다 더 작다는 것을 의미

f(n) = 세타(g(n)) - n보다 큰 모든 n에 대해서 세타 표기가 상한과 하한을 동시에 만족한다는 것을 보여준다.

빅오 표기의 예 n>=2, 3n + 2 <= 4n => 3n + 2 = O(n)
n>=3 , 3n + 3 < 4n => 3n + 3 = O(n)
n>=2, 3n + 3 <= 3n^2 => 3n+3 = O(n^2)     3n + 3이 n^2보다 절대 안커져 하지만 굳이 해봐야 의미가 없다.(학계에서의 빅오인가?)




O(1) 상수시간  => 언제나 같은시간 ex)정렬된 배열에서 가장 큰 값 찾기.     파이썬 디셔너리?    키가지고 값을 찾는 거는 상수시간에 걸려 찾는다.
O(LOGN) 로그 시간
O(n) 선형시간
O(nlogn) 로그 선형 시간
O(n^2) 이차 시간
O(n^3) 3차 시간
O(n^k) 다항식 시간
O(2^n) 지수 시간


효율적 알고리즘의 필요성
-> 10억개를 정렬하는데 PC에서 O(n^2) 알고리즘은 300년, O(nlogn)알고리즘은 5분