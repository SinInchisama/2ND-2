객체지향 -> 자바,c++이 생기면서 객체지향의 시대가 도래했다.
프로그래머로써 필히 알고 있어야하는 개념이 있다.
c언어로는 객체지향을 하기 어렵다.

함수형 프로그램 10년정도 유행됨.
왜냐 멀티스레딩으로 세상이 구현되지않는구나 싱글쓰레드에서 도는게 좋구나

기본 라이브러리 함수 heqp구조 등이 내장, 외부모듈설치 편리

False True => 참 거짓
None => 아무것도 없다
and or not => 논리적인 연산할 때 사용
as => 팝캐스팅?
assert except try ??? =>예외처리
break, continue => 루프 빠져나갈때나 되돌아갈 때
class =>?????????????????????
if else elif => 조건문 
def  => 정의하다 
del => 존재하는 값 제거
return => 함수가 값 반환
for while => 반복문(루프)
from,import => 모듈을 자주 쓰게 되는데 다른 모듈에서 가져올 때 사용????
global => 변수를 선언하면 함수내에서만 쓸수 있는데 밖에 있는 변수 사용할때
in => 디셕너리나 리스트에 잇나 확인
lambda => 이름 없는 변수를 정의할때??????????
pass => 할 일이 없을때 들여쓰고 아무것도 안할때 써야함
yield => 알고에서는 안쓰고 2DGP에서는 씀 제너레이터 만들 때 사용함.

REPL = (Read,Eval,Print) LOOP
뭔가를 타이핑하면 읽고 해석하여 출력하는것을 반복함.
c언어는 코드가 다짜고 컴파일러해야 실행되지만 python은 한줄한줄 실행됨

c언어는 오퍼랜드에 따라 정수계산인지, 실수계산인지 따라가지만
python은 오퍼레이터에 따라 정해짐.

형변환 c언어에서는 연산자로 python은 생성의 의미로
class의 의미로 생성하는 것과 함수를 호출하는 것이 동일하다.


string [인덱스] 는 인덱스가 글자수보다 크면 안됨.

slice에서 [inclusive,exclusive] 왼쪽 꺼는 포함 오른쪽 꺼는 불포함이므로
[4:6]하면 2개의 숫자 밖에 안나옴
하지만 예외로 random randrange(10,20)	-> 10~19
	      random randint(10,20)	-> 10~20


list    a[2:4] = [] =>2:4까지 빈배열로 바꾸어라.


Dictionary 키에 해당하는 값들을 assosiation하면 키를 검색하면 데이터값이 나온다.
파이썬에 Dictionary도 다른 언어처럼 찾는 것이 굉장히 빠르다.
시간복잡도가 상수시간이 걸린다. 다른 언어에서는 해쉬라고 부르기도한다.
클래스 언어는 DIct라고 되있다. 존재하지 않는 인덱스를 쓰면 에러가 난다.
파이썬은 오류가 나기때문에 안에 원하는 값이 있는지 찾아봐야한다.
찾는 방법이 바로 in이다.

For k in a:
print(k)		=> a가 나온다.
print(k,a[k])	=> a와 데이터값이 나온다.

for k,v in a.item():
print(k,v)		=> a와 데이터 값이 나온다.


TUPLE 두개의 값을 묶어서 리턴하면 2개가 리턴된다. 
tuple을 array로 받을수도있고 반대도 가능하다.
그렇게 하면 이 단점을 어느정도 극복할 수 있다.


set 리스트와 달리 중복을 허용하지 않고, 순서가 없음 집합 자료형임.
Dictionary를 쓰는 이유와 같음. set은 디션너리에서 Value를 빼고 key만 남겨놓은것.
어떤것이 포함되어 있느냐 아니냐를 빨리 알아볼 때 사용된다



