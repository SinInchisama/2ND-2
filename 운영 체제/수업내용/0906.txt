seiyoung.choi@gmail.com

버츄얼머신(리눅스)
중간 기말 30 30 출석 20 과제 20(3~4회)

교제 : 명품 운영체제(구매)

----------------------------------------------------------------------------------------------------------------------------------------

운영 체제의 태동 과정

1. 운영체제의 개념

운영체제란 =>	①. 컴퓨터시스템을 로우레벨(하드웨어){밑으로 하드웨어}, 하이레벨(사용자){밑으로 소프트웨어}이라 할 때 사용자와 하드웨어 사이에 중계역할을 한다.
			high lv	사용자(개발자)			사용자는 모든 소프트웨어와 소통을 한다.
				일반 응용프로그램	{				
				[유틸리티프로그램			프로그램을 실행 관리하고 제어한다.
	=>넓은 의미 []		쉘		  SW
	=>좁은의미 운영체제	운영체제(커널)]	}
			low lv	hard ware		hard ware

		②. 운영체제는 모든 자원(눈에 보이는 모든 것. 케이스 안쪽, 바깥쪽 전부다)을 독자적으로 관리한다.			[주요 임무
		③. 컴퓨가 커질 떄 메모리에 적재되어 모든 프로그램을 제어하고 사용자의 요청을 처리하는 사용자 인터페이스.		]

		과하게 이야기해서 운영체제가 사용자를 속이고 지시만 받고 모든 것을 혼자 처리하고 있는 것이다.
		

자원 관리에 있어서 무엇이 중요할까?  =>	효율적인 관리, 효율적인 공유, 공정한 관리
사용자응대에 있어서 무엇이 중요할까? =>	빠른 응대,편리한 사용법



운영체제를 정의하는 핵심 단어들=>	①. 모든 컴퓨터 자원을 관리
				②. 자원에 대한 독점 권한을 가짐
				③. 관리자
				④ 소프트웨어(커널[핵심 코드],U/I도구 프로그램들,디바이스 드라이버[운영체제가 자기 자신을 보호하고 싶어한다.??])
										         [운영체제 자체 코드를 유지하기 위해 업체에서 제공하는 드라이버만 사용하여 자체 코드를 변경하지 않기 위해서]

운영체제의 목적 =>		①. 사용자의 컴퓨터 사용의 편리성
			②. 컴퓨터의 자원 관리의 효율성.

운영체제의 기능 =>		① CPU/프로세스 관리
				메모리 관리
				파일시스템 관리
				장치 관리
				네트워크 관리
				보안 관리
				기타 관리
					- 사용자 관리(사용자 계정 관리)
					- 통계
			모든 것이 자원 관리임. 물어볼 때 운영체제가 어떤 것을 하지않는가정도로 물어볼 수도 있으니 유심히 볼거.


운영체제와 응용 소프트웨어의 차이 =>

운영체제에 대해서 알아야 하는 이유 => 효율적으로 프로그램을 짜기 위해(어떻게 운영체제가 응용 소프트웨어에게 자원을 할당하는지를 알기 위해



---------------------------------------------------------------------------------------------------------------------
2. 운영체제의 태동

		고정 프로그래밍 방식		배선판에다가 2+3을 넣으면 자동으로 5가 나오도록 하는게 초기의 컴퓨터 특징
						* 하드웨어와 소프트웨어의 분리가 없음.
						* 하나의 컴퓨터는 하나의 소프트웨어만 작동한다.
						* 최초의 컴퓨터는 ENIAC (*이름 기억해두기)
		
		내장 프로그래밍 방식(반드시 머릿속에 넣어두기 현재까지 이어지고 있는 방식)
						①. *폰 노이만에 의해 제안
						②. 하드웨어를 여러 가지 일에 써먹을 수 있으면 좋겠다는 생각하에 만듬.	cpu는 연산할 수 있는 능력만 가지고 있음 무엇을 연산할지는 메모리가 결정.
						-> 하드웨어와 소프트웨어 개념 분리(cpu와 전자식 메모리를 분리).
						③. 프로그램을 메모리에 담고, cpu는 프로그램 실행
						④. 프로그램은 입력 장치를 통해 메모리에 적재	

						cpu는 제어장치, 연산장치, 레지스터를 가지고 있고, cpu는 무엇을 연산할지 모르고 메모리가 가지고 있다.
						구조 ------		------------------------------------------------------------
									(중앙처리장치)CPU

									제어장치			->
									연산장치				메모리 장치
									레지스터			<-		
									-------------------------------------------------------------
										입력장치			출력장치	


		프로그램 로더의 발견

		GM OS 탄생

		최초의 운영체제 GM-NAA I/O 탄생	배치 방식(로딩하는 시간이 아깝다, 자동으로 배치하여 순서대로 돌려주는)의 운영체제
						공통으로 필요한 코드들은 라이브러리 형식으로 만들어 메모리에 상주시킴 -> 개발자의 개발 부담을 줄어줌
		
		GM-NAA-IO 운영체제의 구성.		컴퓨터가 시작할 때 메모리에 적재 되어 컴퓨터가 종료할 때까지 메모리에 상주
						- 어셈블러 코드
						- 로더 프로그램
						- 공통 입출력 코드 및 메인 코드

		
		요약		기계식 컴퓨터 -> 전자식 디지털 컴퓨터의 출현 -> 전자식 고정 프로그램 방식의 컴퓨터 -> 폰노이만의 내장 프로그램 컴퓨터 제안
				-> IBM 701 내장 프로그램 컴퓨터 -> 프로그램을 적재하고 실행시키는 로더 프로그램의 필요성 인식 -> 원시적인 운영체제 GM OS(모니터) 개발 -> 최초의 운영체제 GM-NAA I/O 탄생



3. 운영체제의 발전		
		배치 프로그래밍 - 백업시간을 줄였다.
	
		다중 프로그래밍 운영체제 - 	컴퓨터의 동작속도와 인간의 동작속도 차이가 심함 따라서 컴퓨터가 하는 일이 늘어나는 게 좋음.
				 	 CPU가 집중하는 시간(연산하는 시간) I/O에 집중하는 시간(하드디스크 접근, 사용자 입력 등) I/O작업하는 시간이 오래 걸리는데 이 동안 CPU시간이 기달려야된다.
					이 시간동안 CPU를 맡길 필요가 없다. 그동안 다른 일에 CPU를 맡김.

					CPU 동작원리
						CPU -----------------I/O---------------	CPU ---------------------
						대기 -       CPU작업 -----------I/O--------------- -------------------CPU작업
						대기 대기 대기 대기 대기 CPU작업 -----------------I/O----------------------


					문제점 - 	큰 메모리 필요 (CPU는 남아있지만....)
						프로그램의 메모리 할당 및 관리
						메모리 보호 ( 프로그램끼리 서로 간섭 못하게)
						CPU 스케줄링(오랫동안 공부할거.)과 컨텍스트 스위칭(이것도 마찬가지) [다음으로 어떤 프로그램 고를지 정하는거]
						I/O작업이 끝남을 운영체제에게 알려주는 것이 인터럽트.
						동기화(여러 프로그램이 동일 자원을 액세스할 때 발생하는 문제)
						교착 상태

		시분할 운영체제-			배치 처리와 다중 프로그래밍 문제점[비대화식 처리방식,느린 응답시간, 오랜 대기 시간]인식.
						대화식 처리방식, 빠른 응답시간을 기대하며 시분할 운영체제를 개발함.
						지금의 운영체제도 시분할 방식임......;...................... 

		라운드 로빈 스케쥴링		CPU시간을 N개의 프로세서가 있다. 라운드 로빈은 모두 동일한 시간 할당량(타임 슬라이스)을 주는거
						작업을 끝내지 못했어도 다음껄로 넘어감. 이렇게하면 빠른 응답이 가능해짐.
						 