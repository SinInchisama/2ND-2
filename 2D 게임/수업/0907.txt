git을 사용하는 다른 방법
git hub Desktop
최대장점 git hub라는 서버 저장소랑 쉽게 연결되어 편하다.

No local chages => 변화가 없다.
변화가 생기면 git hub desktop이 감지를 함.
밑에 commit 할 수 있는 버튼이 생김.
커밋할때 그냥 하는게 아니라 이유가 있어야한다.
밑에 Description은 한줄로만 부족한 경우 추가적으로 내용을 담을 수 있다.
아무래도 파워셀보다는 훨씬 더 직관적이고 간단하다.

History를 누르면 commit이 나오고 commit을 누르면 무엇을 바뀌었는지 체크 할 수 있다.

새로 만든 Thanks와 기존 hello 오른쪽 아이콘이 다르다.
그 이유는 둘의 변화가 다르기 때문이다.
이제 커밋을 써야하는데 둘의 변화가 다르니깐 별도로 적는게 좋을것이다.
그러면 맨 왼쪽에 체크를 끄고 COMMIT을 하면된다
Hello와 thanks 성적을 담아보자 이때 commit을 해야되는데
둘의 바뀐 사유가 똑같으므로 commit을 같이 하면된다.

visual에서 코드를 짜면 소스파일이 여러개인 경우가 있다.
만약 버그를 찾아서 그 버그를 수정해야된다면, 근데 여려개의 소스 코드를 바꿔야 한다면,
A,B 소스코드를 똑같은 버그때문에 수정했으므로 Commit을 같이 해서 무슨 버그로 바꿨는지 적으면된다.

그러면 어디에 쓰는가 만약 나중에 똑같은 일이 발생하다면 history에서 commit을 찾아 연관된 고쳐진 코드들이 보여줘서 그걸 보고 고치면 된다.

만약 변경된 것이 다르면 지우기 어렵기도 하고 어려울 것이다.
그래서 //처리를 하는 경우가 있는데, ~~~~
만약 commit을 해두었으면 git을 통하여 다시 원래대로 돌릴수 있다.
Revert changes in commit을 통하여.
그러면 원래대로 돌아와있다. 

잘만든 코드를 자랑하고 싶다.
그럼 출판해야되는데 어디에 출판해야되나 git hub에 출판한다.
위쪽 3번째에 Publish respository를 통해 출판한다.
Keep this code private -> 나만 볼거 다른 사람 못봐 근데 켜두면 교수님이 보시기힘들다. 그니깐 끄자
remote respository -> 원격저장소 git hub

push origin -> git hub에 올린 공간에 n개 올라가지 않은것이 있다.
commit할때마다 push 할 필요는없다.
내 pc에서 코딩하다가 publish해서 올리면 된다.

친구가 소스코드를 보자 하면 저장소에 주소를 알려주면되는데 code clone에 저장소를 카피하던가 위에 주소를 카피하면된다.



이번에는 순서를 반대로.
친구가 프로젝트를 하기로했어, github에 리모트 저장소 만들어서
둘다 다운로드를 받아야한다.
git hub에 만드는 방법
Public해주고 readmefile을 추가해줘라 설명을 담아두는 공간 관습적으로 다 집어넣어 저장소에 hepl파일임
	
file -> clone repository ,-> 나의 github계정,URL로 가져올 수 있다.

한번 긁어오면 그 다음부터 일부분만 긁어오면 된다.
위에 fetch origin을 누르면 긁어올수 있다.



매주 실습과제 -> 많은 수의 실습과제는 교수님이 주신 실습코드로 실습을 하고 추가적으로 수정을하는게 대부분이다.
교수님이 나눠주신 소스코드를 fetch해서 긁어오고 교수님한테 보내드려야되는대 그 소스코드를 서버에 올리고 그 링크를 보내드려야된다.
최종 commit link를 보내드리면된다.
history -> view github -> commit에 해당하는 link


commit  messege rull

drilll num
학번 이름
youtube link








------------------------------------------------------------------------------------------
Python 기초


특징
개발 방법론 = 프로그래밍 패러다임 다양
구조적, 절차, 객체, 함수   => 3학년때 배울거에 구체적으로 배울거.

동적 자료형(C언어는 ex)int i의자료형을 바꿀 수 없다. 하지만 Python은 가능)

풍부한 기본 라이브러리 함수(미리 만들어놓은 코드 집합)

-----
장점
쉽다, 간결하다, 빠르게 개발할 수 있다.

언리얼 엔진의 경우 파이썬을 쓸 수 있도록 만들어져있다.


-----
단점

느리다	=> 컴파일러 언어가 아니기 때문에 ex) wow같은 게임은 안된다. 속도가 안되서 그럼 게임에 어떻게 쓰는가? 게임 실행용으론 못만들고 게임 개발을 위한 외부 도구를 만드는 데 사용된다.
너무 유연하다	=> 뭔가 원하는 기능을 만드는 방법이 한두가지가 아니라 너무 많다.
진입 장벽이 낮다	=>경쟁력을 가질 수 없다

줄단위로 명령을 내리고 결과를 보여준다.

1/2 = 0 =>c언어는 빠름을 목표로 하기때문에 정수/정수 = 정수로 판단
/ 대신 shift +

python은 //하면 좀더 빠른 /가 된다. 그리고 결과는 c와 똑같음

7.1 % 4 => c에서는 오류 양쪽에 정수가 와야 되기 때문에 python은 3.0999999996이 나온다 컴퓨터는 근사치를 표현하기 때문에.

python의 제곱은 ^가 아니 **으로 표현
python 2^512도 표현하다 메모리가 다할때까지 표현가능 그래서 과학적으로도 인공지능으로도 많이 쓰인다.

